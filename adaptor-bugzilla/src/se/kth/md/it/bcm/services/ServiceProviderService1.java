// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Jim Amsden          - Support for UI Preview (494303)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package se.kth.md.it.bcm.services;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.UriBuilder;

import org.apache.wink.json4j.JSONObject;
import org.eclipse.lyo.oslc4j.provider.json4j.JsonHelper;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import se.kth.md.it.bcm.BugzillaAdaptorManager;
import se.kth.md.it.bcm.BugzillaAdaptorConstants;
import se.kth.md.it.bcm.resources.BugzDomainConstants;
import se.kth.md.it.bcm.resources.Oslc_cmDomainConstants;
import se.kth.md.it.bcm.servlet.ServiceProviderCatalogSingleton;
import se.kth.md.it.bcm.resources.BugzillaChangeRequest;
import se.kth.md.it.bcm.resources.ChangeRequest;
import se.kth.md.it.bcm.resources.Discussion;
import se.kth.md.it.bcm.resources.Person;
import se.kth.md.it.bcm.resources.Requirement;

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code
@OslcService(Oslc_cmDomainConstants.CHANGE_MANAGEMENT_DOMAIN)
@Path("serviceProviders/{serviceProviderId}/bugzillaChangeRequests")
public class ServiceProviderService1
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;

    // Start of user code class_attributes
    // End of user code

    // Start of user code class_methods
    // End of user code

    public ServiceProviderService1()
    {
        super();
    }

    @OslcQueryCapability
    (
        title = "Change Request Query Capability",
        label = "Change Request Catalog Query",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + BugzDomainConstants.BUGZILLACHANGEREQUEST_PATH,
        resourceTypes = {BugzDomainConstants.BUGZILLACHANGEREQUEST_TYPE},
        usages = {}
    )
    @GET
    
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public BugzillaChangeRequest[] queryBugzillaChangeRequests(
                                                    @PathParam("serviceProviderId") final String serviceProviderId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryBugzillaChangeRequests
        // Here additional logic can be implemented that complements main action taken in BugzillaAdaptorManager
        // End of user code

        final List<BugzillaChangeRequest> resources = BugzillaAdaptorManager.queryBugzillaChangeRequests(httpServletRequest, serviceProviderId, where, page, limit);
        return resources.toArray(new BugzillaChangeRequest [resources.size()]);
    }

    @GET
    
    @Produces({ MediaType.TEXT_HTML })
    public Response queryBugzillaChangeRequestsAsHtml(
                                    @PathParam("serviceProviderId") final String serviceProviderId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryBugzillaChangeRequestsAsHtml
        // End of user code

        final List<BugzillaChangeRequest> resources = BugzillaAdaptorManager.queryBugzillaChangeRequests(httpServletRequest, serviceProviderId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryBugzillaChangeRequestsAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/kth/md/it/bcm/bugzillachangerequestscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcDialog
    (
         title = "Change Request Selection Dialog",
         label = "Change Request Selection Dialog",
         uri = "serviceProviders/{serviceProviderId}/bugzillaChangeRequests/selector",
         hintWidth = "525px",
         hintHeight = "325px",
         resourceTypes = {BugzDomainConstants.BUGZILLACHANGEREQUEST_TYPE},
         usages = {}
    )
    @GET
    @Path("selector")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public void BugzillaChangeRequestSelector(
        @QueryParam("terms") final String terms
        , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException
    {
        try {
            // Start of user code BugzillaChangeRequestSelector_init
            // End of user code

            httpServletRequest.setAttribute("selectionUri",uriInfo.getAbsolutePath().toString());
            // Start of user code BugzillaChangeRequestSelector_setAttributes
            httpServletRequest.setAttribute("bugzillaUri", BugzillaAdaptorManager.getBugzillaUri());
            // End of user code

            if (terms != null ) {
                httpServletRequest.setAttribute("terms", terms);
                final List<BugzillaChangeRequest> resources = BugzillaAdaptorManager.BugzillaChangeRequestSelector(httpServletRequest, serviceProviderId, terms);
                if (resources!= null) {
                            httpServletRequest.setAttribute("resources", resources);
                            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/kth/md/it/bcm/bugzillachangerequestselectorresults.jsp");
                            rd.forward(httpServletRequest, httpServletResponse);
                }
                //a empty search should return an empty list and not NULL!
                throw new WebApplicationException(Status.NOT_FOUND);

            } else {
                try {
                    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/kth/md/it/bcm/bugzillachangerequestselector.jsp");
                    rd.forward(httpServletRequest, httpServletResponse);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single BugzillaChangeRequest via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "Change Request Creation Factory",
         label = "Change Request Creation",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + BugzDomainConstants.BUGZILLACHANGEREQUEST_PATH},
         resourceTypes = {BugzDomainConstants.BUGZILLACHANGEREQUEST_TYPE},
         usages = {}
    )
    @POST
    @Path("create")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public Response createBugzillaChangeRequest(
            @PathParam("serviceProviderId") final String serviceProviderId ,
            final BugzillaChangeRequest aResource
        ) throws IOException, ServletException
    {
        try {
            BugzillaChangeRequest newResource = BugzillaAdaptorManager.createBugzillaChangeRequest(httpServletRequest, aResource, serviceProviderId);
            httpServletResponse.setHeader("ETag", BugzillaAdaptorManager.getETagFromBugzillaChangeRequest(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(BugzillaAdaptorConstants.HDR_OSLC_VERSION, BugzillaAdaptorConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("creator")
    @Consumes({MediaType.WILDCARD})
    public void BugzillaChangeRequestCreator(
                @PathParam("serviceProviderId") final String serviceProviderId
        ) throws IOException, ServletException
    {
        // Start of user code BugzillaChangeRequestCreator
        httpServletRequest.setAttribute("bugzillaUri", BugzillaAdaptorManager.getBugzillaUri());
        // End of user code

        httpServletRequest.setAttribute("creatorUri", uriInfo.getAbsolutePath().toString());
        httpServletRequest.setAttribute("serviceProviderId", serviceProviderId);

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/kth/md/it/bcm/bugzillachangerequestcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "Change Request Creation Dialog",
         label = "Change Request Creation Dialog",
         uri = "serviceProviders/{serviceProviderId}/bugzillaChangeRequests/creator",
         hintWidth = "600px",
         hintHeight = "375px",
         resourceTypes = {BugzDomainConstants.BUGZILLACHANGEREQUEST_TYPE},
         usages = {}
    )
    @POST
    @Path("creator")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createBugzillaChangeRequest(
            @PathParam("serviceProviderId") final String serviceProviderId
        ) {
        try {
            BugzillaChangeRequest newResource = null;

            BugzillaChangeRequest aResource = new BugzillaChangeRequest();

            String[] paramValues;

            paramValues = httpServletRequest.getParameterValues("product");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setProduct(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("component");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setComponent(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("version");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setVersion(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("priority");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setPriority(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("platform");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setPlatform(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("operatingSystem");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setOperatingSystem(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("shortTitle");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setShortTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("description");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDescription(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("title");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("identifier");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setIdentifier(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("subject");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addSubject(paramValues[i]);
                    }
            }
            paramValues = httpServletRequest.getParameterValues("creator");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addCreator(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("contributor");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addContributor(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("created");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("modified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("type");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addType(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("serviceProvider");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addServiceProvider(new URI(paramValues[i]));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("instanceShape");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setInstanceShape(new URI(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("discussedBy");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDiscussedBy(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closeDate");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("status");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setStatus(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setClosed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("inprogress");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setInprogress(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("fixed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setFixed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("approved");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setApproved(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("reviewed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setReviewed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("verified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setVerified(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("relatedChangeRequest");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addRelatedChangeRequest(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsPlanItem");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsPlanItem(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectedByDefect");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectedByDefect(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("implementsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addImplementsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksChangeSet");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksChangeSet(new Link(new URI(paramValues[i])));
                    }
            }

            newResource = BugzillaAdaptorManager.createBugzillaChangeRequest(httpServletRequest, aResource, serviceProviderId);

            if (newResource != null) {
                httpServletRequest.setAttribute("newResource", newResource);
                httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

                // Send back to the form a small JSON response
                httpServletResponse.setContentType("application/json");
                httpServletResponse.setStatus(Status.CREATED.getStatusCode());
                httpServletResponse.addHeader("Location", newResource.getAbout().toString());
                PrintWriter out = httpServletResponse.getWriter();

                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});

                out.print(oslcResponse.toString());
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }
    @GET
    @Path("{bugzillaChangeRequestId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    public BugzillaChangeRequest getBugzillaChangeRequest(
                @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("bugzillaChangeRequestId") final String bugzillaChangeRequestId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final BugzillaChangeRequest aBugzillaChangeRequest = BugzillaAdaptorManager.getBugzillaChangeRequest(httpServletRequest, serviceProviderId, bugzillaChangeRequestId);

        if (aBugzillaChangeRequest != null) {
            // Start of user code getBugzillaChangeRequest
            // End of user code
            httpServletResponse.addHeader(BugzillaAdaptorConstants.HDR_OSLC_VERSION, BugzillaAdaptorConstants.OSLC_VERSION_V2);
            return aBugzillaChangeRequest;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("{bugzillaChangeRequestId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getBugzillaChangeRequestAsHtml(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("bugzillaChangeRequestId") final String bugzillaChangeRequestId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getBugzillaChangeRequestAsHtml_init
        // End of user code

        final BugzillaChangeRequest aBugzillaChangeRequest = BugzillaAdaptorManager.getBugzillaChangeRequest(httpServletRequest, serviceProviderId, bugzillaChangeRequestId);

        if (aBugzillaChangeRequest != null) {
            httpServletRequest.setAttribute("aBugzillaChangeRequest", aBugzillaChangeRequest);
            // Start of user code getBugzillaChangeRequestAsHtml_setAttributes
            httpServletRequest.setAttribute("bugzillaUri", BugzillaAdaptorManager.getBugzillaUri());
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/kth/md/it/bcm/bugzillachangerequest.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("{bugzillaChangeRequestId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getBugzillaChangeRequestCompact(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("bugzillaChangeRequestId") final String bugzillaChangeRequestId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getBugzillaChangeRequestCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final BugzillaChangeRequest aBugzillaChangeRequest = BugzillaAdaptorManager.getBugzillaChangeRequest(httpServletRequest, serviceProviderId, bugzillaChangeRequestId);

        if (aBugzillaChangeRequest != null) {
            final Compact compact = new Compact();

            compact.setAbout(aBugzillaChangeRequest.getAbout());
            compact.setTitle(aBugzillaChangeRequest.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aBugzillaChangeRequest.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aBugzillaChangeRequest.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(BugzillaAdaptorConstants.HDR_OSLC_VERSION, BugzillaAdaptorConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("{bugzillaChangeRequestId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getBugzillaChangeRequestAsHtmlSmallPreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("bugzillaChangeRequestId") final String bugzillaChangeRequestId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getBugzillaChangeRequestAsHtmlSmallPreview_init
        // End of user code

        final BugzillaChangeRequest aBugzillaChangeRequest = BugzillaAdaptorManager.getBugzillaChangeRequest(httpServletRequest, serviceProviderId, bugzillaChangeRequestId);

        if (aBugzillaChangeRequest != null) {
            httpServletRequest.setAttribute("aBugzillaChangeRequest", aBugzillaChangeRequest);
            // Start of user code getBugzillaChangeRequestAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/kth/md/it/bcm/bugzillachangerequestsmallpreview.jsp");
            httpServletResponse.addHeader(BugzillaAdaptorConstants.HDR_OSLC_VERSION, BugzillaAdaptorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("{bugzillaChangeRequestId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getBugzillaChangeRequestAsHtmlLargePreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("bugzillaChangeRequestId") final String bugzillaChangeRequestId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getBugzillaChangeRequestAsHtmlLargePreview_init
        // End of user code

        final BugzillaChangeRequest aBugzillaChangeRequest = BugzillaAdaptorManager.getBugzillaChangeRequest(httpServletRequest, serviceProviderId, bugzillaChangeRequestId);

        if (aBugzillaChangeRequest != null) {
            httpServletRequest.setAttribute("aBugzillaChangeRequest", aBugzillaChangeRequest);
            // Start of user code getBugzillaChangeRequestAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/se/kth/md/it/bcm/bugzillachangerequestlargepreview.jsp");
            httpServletResponse.addHeader(BugzillaAdaptorConstants.HDR_OSLC_VERSION, BugzillaAdaptorConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
}
