/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package se.kth.md.it.bcm;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import se.kth.md.it.bcm.servlet.ServiceProviderCatalogSingleton;

import se.kth.md.it.bcm.ServiceProviderInfo;
import se.kth.md.it.bcm.resources.BugzillaChangeRequest;
import se.kth.md.it.bcm.resources.ChangeRequest;
import se.kth.md.it.bcm.resources.Person;
import se.kth.md.it.bcm.resources.Type;

// Start of user code imports
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.util.Properties;
import java.io.FileInputStream;

import org.eclipse.lyo.oslc4j.client.ServiceProviderRegistryURIs;
import org.eclipse.lyo.oslc4j.core.model.Link;

import com.j2bugzilla.base.Bug;
import com.j2bugzilla.base.BugFactory;
import com.j2bugzilla.base.BugzillaConnector;
import com.j2bugzilla.base.Product;
import com.j2bugzilla.rpc.BugSearch;
import com.j2bugzilla.rpc.CommentBug;
import com.j2bugzilla.rpc.GetBug;
import com.j2bugzilla.rpc.GetProduct;
import com.j2bugzilla.rpc.ReportBug;

import org.eclipse.lyo.oslc4j.bugzilla.jbugzx.rpc.GetAccessibleProducts;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response.Status;

import se.kth.md.it.bcm.servlet.ServletListener;
import se.kth.md.it.bcm.servlet.CredentialsFilter;
import se.kth.md.it.bcm.servlet.ServiceProviderCatalogSingleton;

import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import java.util.HashSet;

// End of user code

// Start of user code pre_class_code
// End of user code

public class BugzillaAdaptorManager {

	// Start of user code class_attributes
	public final static String REALM = "Bugzilla";
	
    private static String bugzillaUri = null;
	private static String admin = null;

    //Bugzilla adapter properties from bugz.properties 
    static {
        Properties props = new Properties();
        try {
        	//bugz.properties file is placed out of package of BugzillaAdaptorManager, getResourceAsStream can't be used.
        	//FileInputStream is used instead.
        	String dir = System.getProperty("user.dir");
        	FileInputStream propertyFilePath = new FileInputStream(dir+"/test/resources/bugz.properties");
        	props.load(propertyFilePath);
        	bugzillaUri = props.getProperty("bugzilla_uri");
        	// normalize the URI so it never ends with '/'
        	if (bugzillaUri != null && bugzillaUri.endsWith("/")) {
        		bugzillaUri = bugzillaUri.substring(0, bugzillaUri.length() - 1);
        	}
           	admin = props.getProperty("admin");
            System.out.println("bugzilla_uri: " + bugzillaUri);
            System.out.println("admin: " + admin);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
	// End of user code
	
	// Start of user code class_methods
    public static String getBugzillaUri() {
        return bugzillaUri;
    }

    public static void setBugzillaUri(String bugzillaUri) {
        BugzillaAdaptorManager.bugzillaUri = bugzillaUri;
    }

	public static String getAdmin() {
		return admin;
	}

    /**
     * get BugzillaConnector from the HttpSession
     * 
     * The connector should be placed in the session by the CredentialsFilter servlet filter
     * 
     * @param request
     * @return connector 
     */
	public static BugzillaConnector getBugzillaConnector(HttpServletRequest request) 
	{	
		//connector should never be null if CredentialsFilter is doing its job
		BugzillaConnector connector = (BugzillaConnector) request.getSession().getAttribute(CredentialsFilter.CONNECTOR_ATTRIBUTE);	
		return connector;
	}
	
	//The following are static utility methods are useful for getting, creating and updating Bugzilla bugs.  Primarily used by BugzillaChangeRequestService

	/**
	 * Converts a {@link Bug} to an OSLC-CM BugzillaChangeRequest.
	 * 
	 * @param bug
	 *            the bug
	 * @return the ChangeRequest to be serialized
	 * @throws URISyntaxException
	 *             on errors setting the bug URI
	 * @throws UnsupportedEncodingException
	 */
	public static BugzillaChangeRequest fromBug(Bug bug, final HttpServletRequest httpServletRequest, final String serviceProviderId)
			throws URISyntaxException, UnsupportedEncodingException {
		BugzillaChangeRequest changeRequest = new BugzillaChangeRequest();
		changeRequest.setIdentifier(Integer.toString(bug.getID()));
		changeRequest.setTitle(bug.getSummary());
		changeRequest.setStatus(bug.getStatus());

		//Map contributor to the person this bug is assigned to
		Object assignedTo = bug.getParameterMap().get("assigned_to");
		if (assignedTo != null) {
			String email = assignedTo.toString();
			Person contributor = new Person();
			//contributor.setMbox(email);
			contributor.setAbout(new URI(ServletListener.getServletBase() + "/person?mbox=" + URLEncoder.encode(email, "UTF-8")));
			HashSet<Person> contributors = new HashSet<Person>();
			contributors.add(contributor);
			changeRequest.setContributor(contributors);
		}
		
		Date createdDate = (Date) bug.getParameterMap().get("creation_time");
		changeRequest.setCreated(createdDate);
		
		Date modifiedDate = (Date) bug.getParameterMap().get("last_change_time");
		changeRequest.setModified(modifiedDate);
		
		changeRequest.setProduct(bug.getProduct());
		changeRequest.setComponent(bug.getComponent());
		
		// Work around a bug in j2bugzilla. Bug.getVersion() results in a class cast exception.
		Object version = bug.getParameterMap().get("version");
		if (version != null) {
			changeRequest.setVersion(version.toString());
		}
		
		changeRequest.setPriority(bug.getPriority());
		
		Map<?, ?> internals = bug.getParameterMap();
		changeRequest.setPlatform((String) internals.get("platform"));
		changeRequest.setOperatingSystem((String) internals.get("op_sys"));
		
		changeRequest.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId).getAbout());  
		changeRequest.setAbout(BugzillaChangeRequest.constructURI(serviceProviderId, changeRequest.getIdentifier()));

		return changeRequest;
	}

    /**
     * Convert a list of Bugzilla Bugs to a list of BugzillaChangeRequests
     * 
     * @param httpServletRequest
     * @param bugList
     * @param productId
     * @return
     */
	public static List<BugzillaChangeRequest> changeRequestsFromBugList(final HttpServletRequest httpServletRequest, final List<Bug> bugList, final String serviceProviderId)
    {
    	List<BugzillaChangeRequest> results = new ArrayList<BugzillaChangeRequest>();
    	
        for (Bug bug : bugList) {
        	BugzillaChangeRequest changeRequest = null;
        	try {
        		changeRequest = BugzillaAdaptorManager.fromBug(bug, httpServletRequest, serviceProviderId);
        	} catch (Exception e) {
        		throw new WebApplicationException(e);
        	}
        	
        	if (changeRequest != null) {
        		results.add(changeRequest);
        	}
        }
        return results;
    }
	
	/**
	 * Create a list of Bugs for a product ID using paging
	 * 
	 * @param httpServletRequest
	 * @param productIdString
	 * @param page
	 * @param limit
	 * @return The list of bugs, paged if necessary
	 * @throws IOException
	 * @throws ServletException
	 */
	public static List<Bug> getBugsByProduct(final HttpServletRequest httpServletRequest, final String productIdString, int page, int limit) throws IOException, ServletException 
    {
    	List<Bug> results=null;
		
		

		try {
			final BugzillaConnector bc = BugzillaAdaptorManager.getBugzillaConnector(httpServletRequest);
			final String pageString = httpServletRequest.getParameter("page");
			
			if (null != pageString) {
				page = Integer.parseInt(pageString);
			}
			int productId = Integer.parseInt(productIdString);
			
			final GetProduct getProducts = new GetProduct(productId); 
			bc.executeMethod(getProducts);
			final Product product = getProducts.getProduct();
		
			final BugSearch bugSearch = createBugSearch(page, limit, product);			
			bc.executeMethod(bugSearch);
			results = bugSearch.getSearchResults();
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e);
		}
    	
    	return results;
    }
	
	protected static BugSearch createBugSearch(final String summary) 
	{
		BugSearch.SearchQuery summaryQuery = new BugSearch.SearchQuery(
				BugSearch.SearchLimiter.SUMMARY, summary);
		BugSearch.SearchQuery limitQuery = new BugSearch.SearchQuery(
				BugSearch.SearchLimiter.LIMIT, "50");
			
		BugSearch bugSearch = new BugSearch(summaryQuery, limitQuery);
			
		return bugSearch;
	}

	
	protected static BugSearch createBugSearch(int page, int limit, Product product) {
		BugSearch.SearchQuery productQuery = new BugSearch.SearchQuery(
				BugSearch.SearchLimiter.PRODUCT, product.getName());
		BugSearch.SearchQuery limitQuery = new BugSearch.SearchQuery(
				BugSearch.SearchLimiter.LIMIT, (limit + 1) + "");
		BugSearch.SearchQuery offsetQuery = new BugSearch.SearchQuery(
				BugSearch.SearchLimiter.OFFSET, (page * limit) + "");
		
		return new BugSearch(productQuery, limitQuery, offsetQuery);
	}
	
	/**
	 * Get a Bugzilla Bug by id
	 * @param request
	 * @param bugIdString
	 * @return Bug
	 * @throws IOException
	 * @throws ServletException
	 */
	public static Bug getBugById(final HttpServletRequest request, final String bugIdString) throws IOException, ServletException
	{
		int bugId = -1;
		Bug bug = null;
		
		try {
			bugId = Integer.parseInt(bugIdString);
			final BugzillaConnector bc = BugzillaAdaptorManager.getBugzillaConnector(request);			
			final GetBug getBug = new GetBug(bugId);
			bc.executeMethod(getBug);
			bug = getBug.getBug();	
			if (bug == null) {
				throw new WebApplicationException(Status.NOT_FOUND);
			}  
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e);
		}
		
		return bug;
	}
	
	public static Product getProduct(final HttpServletRequest httpServletRequest, final String productIdString)
	{
		int productId = Integer.parseInt(productIdString);
		Product product = null;
		
		try {
			final BugzillaConnector bc = BugzillaAdaptorManager.getBugzillaConnector(httpServletRequest);				
			GetProduct getProducts = new GetProduct(productId); 
			bc.executeMethod(getProducts);
			product = getProducts.getProduct();
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e);
		}
		return product;
	}
	
	/**
	 * Add OSLC links to the comment field of a Bug
	 * 
	 * @param request
	 * @param cr - BugzillaChangeRequest containing the links
	 * @throws ServletException
	 * @throws IOException
	 */
	public static void updateBug(final HttpServletRequest request, final BugzillaChangeRequest cr) throws  ServletException, IOException
	{
		try
		{
			final BugzillaConnector bc = BugzillaAdaptorManager.getBugzillaConnector(request);
			
			// No built in field to hold external links. Just add the new link as a comment for now.
			String comment = getLinksComment(cr);
			if (comment.length() != 0) {
				CommentBug bugzillaMethod = new CommentBug(Integer.parseInt(cr.getIdentifier()), comment);
				bc.executeMethod(bugzillaMethod);
			}
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new WebApplicationException(e);
		}
	}
	
	protected static void addLinkComment(final StringBuffer buffer, final String linkType, final Link [] links) {
		if (links != null && (links.length !=0)) {
			buffer.append(linkType);
			buffer.append(":\n\n");
			for (Link link : links) {
				buffer.append(link.getValue().toString());
				buffer.append("\n");
			}
		}
	}

	protected static String getLinksComment(final BugzillaChangeRequest cr) {
		final StringBuffer b = new StringBuffer();
		
		addLinkComment(b, "Affected by Defect", cr.getAffectedByDefect().toArray(new Link[cr.getAffectedByDefect().size()]));
		addLinkComment(b, "Affects Plan Item", cr.getAffectsPlanItem().toArray(new Link[cr.getAffectsPlanItem().size()]));
		addLinkComment(b, "Affects Requirement", cr.getAffectsRequirement().toArray(new Link[cr.getAffectsRequirement().size()]));
		addLinkComment(b, "Affects Test Result", cr.getAffectsTestResult().toArray(new Link[cr.getAffectsTestResult().size()]));
		addLinkComment(b, "Blocks Test Execution Record", cr.getBlocksTestExecutionRecord().toArray(new Link[cr.getBlocksTestExecutionRecord().size()]));
		addLinkComment(b, "Implements Requirement", cr.getImplementsRequirement().toArray(new Link[cr.getImplementsRequirement().size()]));
		addLinkComment(b, "Related Change Request", cr.getRelatedChangeRequest().toArray(new Link[cr.getRelatedChangeRequest().size()]));
		addLinkComment(b, "Related Test Execution Record", cr.getRelatedTestExecutionRecord().toArray(new Link[cr.getRelatedTestExecutionRecord().size()]));
		addLinkComment(b, "Related Test Plane", cr.getRelatedTestPlan().toArray(new Link[cr.getRelatedTestPlan().size()]));
		addLinkComment(b, "Related Test Script", cr.getRelatedTestScript().toArray(new Link[cr.getRelatedTestScript().size()]));
		addLinkComment(b, "Tested by Test Case", cr.getTestedByTestCase().toArray(new Link[cr.getTestedByTestCase().size()]));
		addLinkComment(b, "Tracks Change Set", cr.getTracksChangeSet().toArray(new Link[cr.getTracksChangeSet().size()]));
		addLinkComment(b, "Tracks Requirement", cr.getTracksRequirement().toArray(new Link[cr.getTracksRequirement().size()]));
		
		return b.toString();
	}
	// End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
		// TODO Implement code to establish connection to data backbone etc ...
		// Start of user code contextInitializeServletListener
		// End of user code
    }

	public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
	{
		// TODO Implement code to shutdown connections to data backbone etc...
		// Start of user code contextDestroyed
		// End of user code
	}

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
		ServiceProviderInfo[] serviceProviderInfos = {};
		// TODO Implement code to return the set of ServiceProviders
		// Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
		try {
			BugzillaConnector bc = BugzillaAdaptorManager.getBugzillaConnector(httpServletRequest);
			GetAccessibleProducts getProductIds = new GetAccessibleProducts();
			bc.executeMethod(getProductIds);
			Integer[] productIds = getProductIds.getIds();
			serviceProviderInfos = new ServiceProviderInfo [productIds.length];
			ServiceProviderInfo serviceProviderInfo;
			int index = 0;
	        for (Integer p : productIds) {
	        	serviceProviderInfo = new ServiceProviderInfo();
	        	//Check the original Lyo labs to see how one can extract the product name here.
	        	GetProduct getProductMethod = new GetProduct(p);
	        	bc.executeMethod(getProductMethod);
	        	serviceProviderInfo.name = getProductMethod.getProduct().getName();
	        	//serviceProviderInfo.name = "Some Name"; 
	        	serviceProviderInfo.serviceProviderId = Integer.toString(p);
	        	serviceProviderInfos[index] = serviceProviderInfo; 
	        	index++;
	        }
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e,Status.INTERNAL_SERVER_ERROR);
		}
		// End of user code
		return serviceProviderInfos;
    }

    public static List<BugzillaChangeRequest> queryBugzillaChangeRequests(HttpServletRequest httpServletRequest, final String serviceProviderId, String where, int page, int limit)
    {
		List<BugzillaChangeRequest> resources = null;
		// TODO Implement code to return a set of resources
		
		// Start of user code queryBugzillaChangeRequests
		try {
	        List<Bug> bugList = BugzillaAdaptorManager.getBugsByProduct(httpServletRequest, serviceProviderId, page, limit);      
	        resources = BugzillaAdaptorManager.changeRequestsFromBugList(httpServletRequest, bugList, serviceProviderId);		
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e,Status.INTERNAL_SERVER_ERROR);
		}
		// End of user code
		return resources;
    }
	public static List<BugzillaChangeRequest> BugzillaChangeRequestSelector(HttpServletRequest httpServletRequest, final String serviceProviderId, String terms)   
    {
		List<BugzillaChangeRequest> resources = null;
		// TODO Implement code to return a set of resources, based on search criteria 
		
		// Start of user code BugzillaChangeRequestSelector
		try {
			final BugzillaConnector bc = BugzillaAdaptorManager.getBugzillaConnector(httpServletRequest);
			BugSearch bugSearch = createBugSearch(terms);
			bc.executeMethod(bugSearch);
			List<Bug> bugList = bugSearch.getSearchResults();
			resources = changeRequestsFromBugList(httpServletRequest, bugList, serviceProviderId);

		} catch (Exception e) {
			throw new WebApplicationException(e);
		}
		// End of user code
		return resources;
    }
	public static BugzillaChangeRequest createBugzillaChangeRequest(HttpServletRequest httpServletRequest, final BugzillaChangeRequest aResource, final String serviceProviderId)
    {
		BugzillaChangeRequest newResource = null;
		// TODO Implement code to create a resource
		
		// Start of user code createBugzillaChangeRequest
		//[comment TODO: We should actually enter ALL properties that the user set :-) and not just the 6 below!!!! /]
		String newBugId = null;
		try {
			final BugzillaConnector bc = BugzillaAdaptorManager.getBugzillaConnector(httpServletRequest);
			GetProduct getProducts = new GetProduct(Integer.parseInt(serviceProviderId));
			bc.executeMethod(getProducts);
			final Product product = getProducts.getProduct();

			String summary = aResource.getTitle();
			String component = aResource.getComponent();
			String version = aResource.getVersion();
			String operatingSystem = aResource.getOperatingSystem();
			String platform = aResource.getPlatform();
			String description = aResource.getDescription();

			BugFactory factory = new BugFactory().newBug().setProduct(product.getName());
			
			if (summary != null) {
				factory.setSummary(summary);
			}
			if (version != null) {
				factory.setVersion(version);
			}
			if (component != null) {
				factory.setComponent(component);
			}
			if (platform != null) {
				factory.setPlatform(platform);
			} else
				factory.setPlatform("Other");

			if (operatingSystem != null) {
				factory.setOperatingSystem(operatingSystem);
			} else
				factory.setOperatingSystem("Other");

			if (description != null) {
				factory.setDescription(description);
			}

			Bug bug = factory.createBug();
			ReportBug reportBug = new ReportBug(bug);
			bc.executeMethod(reportBug);
			newBugId = Integer.toString(reportBug.getID());
    		final Bug newBug = BugzillaAdaptorManager.getBugById(httpServletRequest, newBugId);
    		newResource = BugzillaAdaptorManager.fromBug(newBug, httpServletRequest, serviceProviderId);

		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e);
		}
		// End of user code
		return newResource;
    }

	public static String getETagFromBugzillaChangeRequest(final BugzillaChangeRequest aResource)
    {
		String eTag = null;
		// TODO Implement code to return an ETag for a particular resource
		// Start of user code getETagFromBugzillaChangeRequest
    	Long eTagAsTime = null;
    	
    	if (aResource.getModified() != null) {
    		eTagAsTime = aResource.getModified().getTime();
    	} else if (aResource.getCreated() != null) {
    		eTagAsTime = aResource.getCreated().getTime();
    	} else {
    		eTagAsTime = new Long(0);
    	}
		eTag = eTagAsTime.toString();
		// End of user code
		return eTag;
    }
	public static BugzillaChangeRequest getBugzillaChangeRequest(HttpServletRequest httpServletRequest, final String serviceProviderId, final String bugzillaChangeRequestId)
    {
		BugzillaChangeRequest aResource = null;
		// TODO Implement code to return a resource
		
		// Start of user code getBugzillaChangeRequest
		try {
	        final Bug bug = BugzillaAdaptorManager.getBugById(httpServletRequest, bugzillaChangeRequestId);
	        if (bug != null) {
	        	aResource = BugzillaAdaptorManager.fromBug(bug, httpServletRequest, serviceProviderId);
	        }
		} catch (Exception e) {
			e.printStackTrace();
			throw new WebApplicationException(e,Status.INTERNAL_SERVER_ERROR);
		}
		// End of user code
		return aResource;
    }
}
